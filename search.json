[{"path":"https://fastpermute.ghyper.net/articles/benchmark.html","id":"combinations-with-repetition","dir":"Articles","previous_headings":"","what":"Combinations with Repetition","title":"Benchmarking fastpeRmute","text":"","code":"mb_comb_with_rep <- microbenchmark(   fastpeRmute = fastpeRmute:::combinationsWithRepetition(20, 5),   gtools = gtools::combinations(n = 20, r = 5, repeats.allowed = TRUE),   times = 100L )  df_comb_with_rep <- as.data.frame(mb_comb_with_rep)  ggplot(df_comb_with_rep, aes(x = expr, y = time)) +    geom_boxplot() +    theme_minimal() +    labs(title = \"Combinations with Repetition\", y = \"Time (nanoseconds)\", x = \"Function\") +    coord_flip()"},{"path":"https://fastpermute.ghyper.net/articles/benchmark.html","id":"combinations-without-repetition","dir":"Articles","previous_headings":"","what":"Combinations without Repetition","title":"Benchmarking fastpeRmute","text":"","code":"mb_comb_without_rep <- microbenchmark(   fastpeRmute = fastpeRmute:::combinationsWithoutRepetition(20, 5),   combn = combn(x = 20, m = 5),   gtools = gtools::combinations(n = 20, r = 5, repeats.allowed = FALSE),   times = 100L )  df_comb_without_rep <- as.data.frame(mb_comb_without_rep)  ggplot(df_comb_without_rep, aes(x = expr, y = time)) +    geom_boxplot() +    theme_minimal() +    labs(title = \"Combinations without Repetition\", y = \"Time (nanoseconds)\", x = \"Function\") +    coord_flip()"},{"path":"https://fastpermute.ghyper.net/articles/benchmark.html","id":"permutations-without-repetition","dir":"Articles","previous_headings":"","what":"Permutations without Repetition","title":"Benchmarking fastpeRmute","text":"","code":"mb_perm_without_rep <- microbenchmark(   fastpeRmute = fastpeRmute:::permutationsWithoutRepetition(15,5),   gtools = gtools::permutations(n = 15, r = 5, repeats.allowed = FALSE),   times = 100L )  df_perm_without_rep <- as.data.frame(mb_perm_without_rep)  ggplot(df_perm_without_rep, aes(x = expr, y = time)) +    geom_boxplot() +    theme_minimal() +    labs(title = \"Permutations without Repetition\", y = \"Time (nanoseconds)\", x = \"Function\") +    coord_flip()"},{"path":"https://fastpermute.ghyper.net/articles/benchmark.html","id":"permutations-with-repetition","dir":"Articles","previous_headings":"","what":"Permutations with Repetition","title":"Benchmarking fastpeRmute","text":"benchmark results, can see performance differences fastpeRmute, gtools, base-r functions exist.","code":"mb_perm_with_rep <- microbenchmark(   fastpeRmute = fastpeRmute:::permutationsWithRepetition(15,5),   gtools = gtools::permutations(n = 15, r = 5, repeats.allowed = TRUE),   times = 100L )  df_perm_with_rep <- as.data.frame(mb_perm_with_rep)  ggplot(df_perm_with_rep, aes(x = expr, y = time)) +    geom_boxplot() +    theme_minimal() +    labs(title = \"Permutations with Repetition\", y = \"Time (nanoseconds)\", x = \"Function\") +    coord_flip()"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"fastpermute-fast-combinations-and-permutations-in-r","dir":"Articles","previous_headings":"","what":"fastpeRmute: Fast Combinations and Permutations in R","title":"fastpeRmute","text":"fastpeRmute package offers efficient functions computing combinations permutations without repetition R. tailored high performance provides functionality can faster base R gtools package.","code":""},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"installation","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R","what":"Installation","title":"fastpeRmute","text":"install latest development version GitHub:","code":"devtools::install_github(\"gi0na/fastpeRmute\")"},{"path":[]},{"path":[]},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"without-repetition","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Combinations","what":"Without Repetition","title":"fastpeRmute","text":"Load library: Compute combinations without repetition:","code":"library(fastpeRmute) library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr     1.1.4     ✔ readr     2.1.5 ## ✔ forcats   1.0.0     ✔ stringr   1.5.1 ## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 ## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1 ## ✔ purrr     1.0.2      ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag()    masks stats::lag() ## ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors combinations(n = 10, r = 4) ## # A tibble: 210 × 4 ##       V1    V2    V3    V4 ##    <int> <int> <int> <int> ##  1     1     2     3     4 ##  2     1     2     3     5 ##  3     1     2     3     6 ##  4     1     2     3     7 ##  5     1     2     3     8 ##  6     1     2     3     9 ##  7     1     2     3    10 ##  8     1     2     4     5 ##  9     1     2     4     6 ## 10     1     2     4     7 ## # ℹ 200 more rows"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"with-repetition","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Combinations","what":"With Repetition","title":"fastpeRmute","text":"Compute combinations repetition:","code":"combinations(n = 10, r = 4, repeats.allowed = T) ## # A tibble: 715 × 4 ##       V1    V2    V3    V4 ##    <int> <int> <int> <int> ##  1     1     1     1     1 ##  2     1     1     1     2 ##  3     1     1     1     3 ##  4     1     1     1     4 ##  5     1     1     1     5 ##  6     1     1     1     6 ##  7     1     1     1     7 ##  8     1     1     1     8 ##  9     1     1     1     9 ## 10     1     1     1    10 ## # ℹ 705 more rows"},{"path":[]},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"without-repetition-1","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Permutations","what":"Without Repetition","title":"fastpeRmute","text":"Compute permutations without repetition:","code":"permutations(n = 4, r = 2) ##       V1 V2 ##  [1,]  1  2 ##  [2,]  2  1 ##  [3,]  1  3 ##  [4,]  3  1 ##  [5,]  1  4 ##  [6,]  4  1 ##  [7,]  2  3 ##  [8,]  3  2 ##  [9,]  2  4 ## [10,]  4  2 ## [11,]  3  4 ## [12,]  4  3"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"with-repetition-1","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Permutations","what":"With Repetition","title":"fastpeRmute","text":"Compute permutations repetition:","code":"permutations(n = 4, r = 2, repeats.allowed = T) ##       V1 V2 ##  [1,]  1  1 ##  [2,]  1  2 ##  [3,]  1  3 ##  [4,]  1  4 ##  [5,]  2  1 ##  [6,]  2  2 ##  [7,]  2  3 ##  [8,]  2  4 ##  [9,]  3  1 ## [10,]  3  2 ## [11,]  3  3 ## [12,]  3  4 ## [13,]  4  1 ## [14,]  4  2 ## [15,]  4  3 ## [16,]  4  4"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"using-vectors-and-lists","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples","what":"Using Vectors and Lists","title":"fastpeRmute","text":"Sometimes, ’s helpful generate combinations permutations specific objects.","code":""},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"combinations-from-a-vector","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Using Vectors and Lists","what":"Combinations from a Vector","title":"fastpeRmute","text":"Using built-letters vector:","code":"v = letters combinations(v=v, r = 3) ## # A tibble: 2,600 × 3 ##    V1    V2    V3    ##    <chr> <chr> <chr> ##  1 a     b     c     ##  2 a     b     d     ##  3 a     b     e     ##  4 a     b     f     ##  5 a     b     g     ##  6 a     b     h     ##  7 a     b     i     ##  8 a     b     j     ##  9 a     b     k     ## 10 a     b     l     ## # ℹ 2,590 more rows"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"permutations-from-a-vector","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Using Vectors and Lists","what":"Permutations from a Vector","title":"fastpeRmute","text":"Generate permutations letters vector:","code":"v = letters[1:4] permutations(v=v, r = 2) ##       V1  V2  ##  [1,] \"a\" \"b\" ##  [2,] \"b\" \"a\" ##  [3,] \"a\" \"c\" ##  [4,] \"c\" \"a\" ##  [5,] \"a\" \"d\" ##  [6,] \"d\" \"a\" ##  [7,] \"b\" \"c\" ##  [8,] \"c\" \"b\" ##  [9,] \"b\" \"d\" ## [10,] \"d\" \"b\" ## [11,] \"c\" \"d\" ## [12,] \"d\" \"c\""},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"combinations-from-a-list","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Using Vectors and Lists","what":"Combinations from a List","title":"fastpeRmute","text":"","code":"v <- mapply(v1 = letters[1:4], v2 = sample(LETTERS)[1:4], FUN = function(v1, v2) c(v1, v2), SIMPLIFY = FALSE) combinations(v=v, r = 3, out_format = 'tibble') ## # A tibble: 4 × 3 ##   V1        V2        V3        ##   <list>    <list>    <list>    ## 1 <chr [2]> <chr [2]> <chr [2]> ## 2 <chr [2]> <chr [2]> <chr [2]> ## 3 <chr [2]> <chr [2]> <chr [2]> ## 4 <chr [2]> <chr [2]> <chr [2]>"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"permutations-from-a-list","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R > Examples > Using Vectors and Lists","what":"Permutations from a List","title":"fastpeRmute","text":"","code":"permutations(v=v, r = 2, out_format = 'tibble') ## # A tibble: 12 × 2 ##    V1        V2        ##    <list>    <list>    ##  1 <chr [2]> <chr [2]> ##  2 <chr [2]> <chr [2]> ##  3 <chr [2]> <chr [2]> ##  4 <chr [2]> <chr [2]> ##  5 <chr [2]> <chr [2]> ##  6 <chr [2]> <chr [2]> ##  7 <chr [2]> <chr [2]> ##  8 <chr [2]> <chr [2]> ##  9 <chr [2]> <chr [2]> ## 10 <chr [2]> <chr [2]> ## 11 <chr [2]> <chr [2]> ## 12 <chr [2]> <chr [2]>"},{"path":"https://fastpermute.ghyper.net/articles/vignette.html","id":"contributions-feedback","dir":"Articles","previous_headings":"fastpeRmute: Fast Combinations and Permutations in R","what":"Contributions & Feedback","title":"fastpeRmute","text":"Feel free raise issues, contribute codebase, provide feedback package GitHub repository.","code":""},{"path":"https://fastpermute.ghyper.net/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giona Casiraghi. Maintainer.","code":""},{"path":"https://fastpermute.ghyper.net/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Casiraghi G (2024). fastpeRmute: Efficient Combinations Permutations R. R package version 0.1.0, https://fastpeRmute.ghyper.net/.","code":"@Manual{,   title = {fastpeRmute: Efficient Combinations and Permutations in R},   author = {Giona Casiraghi},   year = {2024},   note = {R package version 0.1.0},   url = {https://fastpeRmute.ghyper.net/}, }"},{"path":"https://fastpermute.ghyper.net/index.html","id":"fastpermute","dir":"","previous_headings":"","what":"Efficient Combinations and Permutations in R","title":"Efficient Combinations and Permutations in R","text":"Fast Combinations Permutations R. fastpeRmute package offers efficient functions computing combinations permutations without repetition R. underlying implementation leverages C++ optimal performance, making potentially faster base R packages like gtools.","code":""},{"path":"https://fastpermute.ghyper.net/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Efficient Combinations and Permutations in R","text":"install latest development version GitHub:","code":"devtools::install_github(\"gi0na/fastpeRmute\")"},{"path":[]},{"path":[]},{"path":"https://fastpermute.ghyper.net/index.html","id":"without-repetition","dir":"","previous_headings":"Usage > Combinations","what":"Without Repetition","title":"Efficient Combinations and Permutations in R","text":"","code":"library(fastpeRmute) combinations(n = 10, r = 4)"},{"path":"https://fastpermute.ghyper.net/index.html","id":"with-repetition","dir":"","previous_headings":"Usage > Combinations","what":"With Repetition","title":"Efficient Combinations and Permutations in R","text":"","code":"combinations(n = 10, r = 4, repeats.allowed = TRUE)"},{"path":[]},{"path":"https://fastpermute.ghyper.net/index.html","id":"without-repetition-1","dir":"","previous_headings":"Usage > Permutations","what":"Without Repetition","title":"Efficient Combinations and Permutations in R","text":"","code":"permutations(n = 4, r = 2)"},{"path":"https://fastpermute.ghyper.net/index.html","id":"with-repetition-1","dir":"","previous_headings":"Usage > Permutations","what":"With Repetition","title":"Efficient Combinations and Permutations in R","text":"","code":"permutations(n = 4, r = 2, repeats.allowed = TRUE)"},{"path":"https://fastpermute.ghyper.net/index.html","id":"using-vectors-and-lists","dir":"","previous_headings":"Usage","what":"Using Vectors and Lists","title":"Efficient Combinations and Permutations in R","text":"can also generate combinations permutations specific vectors:","code":""},{"path":"https://fastpermute.ghyper.net/index.html","id":"combinations-from-a-vector","dir":"","previous_headings":"Usage > Using Vectors and Lists","what":"Combinations from a Vector","title":"Efficient Combinations and Permutations in R","text":"","code":"v = letters combinations(v=v, r = 3)"},{"path":"https://fastpermute.ghyper.net/index.html","id":"permutations-from-a-vector","dir":"","previous_headings":"Usage > Using Vectors and Lists","what":"Permutations from a Vector","title":"Efficient Combinations and Permutations in R","text":"","code":"v = letters[1:4] permutations(v=v, r = 2)"},{"path":"https://fastpermute.ghyper.net/index.html","id":"combinations-from-a-list","dir":"","previous_headings":"Usage > Using Vectors and Lists","what":"Combinations from a List","title":"Efficient Combinations and Permutations in R","text":"","code":"v <- mapply(v1 = letters[1:4], v2 = sample(LETTERS)[1:4], FUN = function(v1, v2) c(v1, v2), SIMPLIFY = FALSE) combinations(v=v, r = 3, out_format = 'tibble')"},{"path":"https://fastpermute.ghyper.net/index.html","id":"permutations-from-a-list","dir":"","previous_headings":"Usage > Using Vectors and Lists","what":"Permutations from a List","title":"Efficient Combinations and Permutations in R","text":"","code":"v <- mapply(v1 = letters[1:4], v2 = sample(LETTERS)[1:4], FUN = function(v1, v2) c(v1, v2), SIMPLIFY = FALSE) permutations(v=v, r = 2, out_format = 'tibble')"},{"path":"https://fastpermute.ghyper.net/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Efficient Combinations and Permutations in R","text":"Feedback, contributions, issues welcome GitHub repository.","code":""},{"path":"https://fastpermute.ghyper.net/reference/combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Combinations of Elements — combinations","title":"Compute Combinations of Elements — combinations","text":"function calculates combinations set objects. offers flexibility allowing combinations repetition, well returning counts corresponding permutations. also provides different output formats tailored processing analysis.","code":""},{"path":"https://fastpermute.ghyper.net/reference/combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Combinations of Elements — combinations","text":"","code":"combinations(   n = NULL,   r,   v = NULL,   set = TRUE,   repeats.allowed = FALSE,   count.permutations = FALSE,   out_format = \"auto\" )"},{"path":"https://fastpermute.ghyper.net/reference/combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Combinations of Elements — combinations","text":"n Numeric. number elements input set. `v` provided, `n` ignored. r Numeric. number elements selected combination. v vector list containing objects combined. specified, defaults sequence 1 `n`. set Logical. TRUE, function remove duplicate values input vector `v`. repeats.allowed Logical. Determines whether combinations repetition allowed. Default FALSE. count.permutations Logical. set TRUE, additional column appended output indicating number permutations corresponding combination. out_format character string specifying desired format output. Valid options \"matrix\", \"dataframe\", \"tibble\", \"datatable\", \"auto\". \"auto\" chosen, function decide suitable format based input parameters.","code":""},{"path":"https://fastpermute.ghyper.net/reference/combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Combinations of Elements — combinations","text":"Depending `out_format` specified, function returns combinations matrix,         dataframe, tibble, datatable. `count.permutations` TRUE, last column output         indicate number permutations corresponding combination.","code":""},{"path":"https://fastpermute.ghyper.net/reference/combinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Combinations of Elements — combinations","text":"","code":"# Basic combination without repetition combinations(n = 4, r = 2) #>      V1 V2 #> [1,]  1  2 #> [2,]  1  3 #> [3,]  1  4 #> [4,]  2  3 #> [5,]  2  4 #> [6,]  3  4  # Combination with repetition combinations(n = 4, r = 2, repeats.allowed = TRUE) #>       V1 V2 #>  [1,]  1  1 #>  [2,]  1  2 #>  [3,]  1  3 #>  [4,]  1  4 #>  [5,]  2  2 #>  [6,]  2  3 #>  [7,]  2  4 #>  [8,]  3  3 #>  [9,]  3  4 #> [10,]  4  4  # Combination with repetition and count of corresponding permutations combinations(n = 4, r = 2, repeats.allowed = TRUE, count.permutations = TRUE) #>       V1 V2 n_permutations #>  [1,]  1  1              2 #>  [2,]  1  2              1 #>  [3,]  1  3              1 #>  [4,]  1  4              1 #>  [5,]  2  2              2 #>  [6,]  2  3              1 #>  [7,]  2  4              1 #>  [8,]  3  3              2 #>  [9,]  3  4              1 #> [10,]  4  4              2  # Using a custom vector of objects for combinations combinations(v = c(\"apple\", \"banana\", \"cherry\"), r = 2) #>      V1       V2       #> [1,] \"apple\"  \"banana\" #> [2,] \"apple\"  \"cherry\" #> [3,] \"banana\" \"cherry\""},{"path":"https://fastpermute.ghyper.net/reference/permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Permutations of Elements — permutations","title":"Compute Permutations of Elements — permutations","text":"function calculates permutations set objects. offers flexibility allowing permutations repetition, well returning counts identical permutations. also provides different output formats tailored processing analysis.","code":""},{"path":"https://fastpermute.ghyper.net/reference/permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Permutations of Elements — permutations","text":"","code":"permutations(   n = NULL,   r,   v = NULL,   set = TRUE,   repeats.allowed = FALSE,   count.permutations = FALSE,   out_format = \"auto\" )"},{"path":"https://fastpermute.ghyper.net/reference/permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Permutations of Elements — permutations","text":"n Numeric. number elements input set. `v` provided, `n` ignored. r Numeric. number elements selected permutation. v vector list containing objects permuted. specified, defaults sequence 1 `n`. set Logical. TRUE, function remove duplicate values input vector `v`. repeats.allowed Logical. Determines whether permutations repetition allowed. Default FALSE. count.permutations Logical. set TRUE, additional column appended output indicating number identical permutations row. out_format character string specifying desired format output. Valid options \"matrix\", \"dataframe\", \"tibble\", \"datatable\", \"auto\". \"auto\" chosen, function decide suitable format based input parameters.","code":""},{"path":"https://fastpermute.ghyper.net/reference/permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Permutations of Elements — permutations","text":"Depending `out_format` specified, function returns permutations matrix,         dataframe, tibble, datatable. `count.permutations` TRUE, last column output         indicate number identical permutations permutation.","code":""},{"path":"https://fastpermute.ghyper.net/reference/permutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Permutations of Elements — permutations","text":"","code":"# Basic permutation without repetition permutations(n = 4, r = 2) #>       V1 V2 #>  [1,]  1  2 #>  [2,]  2  1 #>  [3,]  1  3 #>  [4,]  3  1 #>  [5,]  1  4 #>  [6,]  4  1 #>  [7,]  2  3 #>  [8,]  3  2 #>  [9,]  2  4 #> [10,]  4  2 #> [11,]  3  4 #> [12,]  4  3  # Permutation with repetition permutations(n = 4, r = 2, repeats.allowed = TRUE) #>       V1 V2 #>  [1,]  1  1 #>  [2,]  1  2 #>  [3,]  1  3 #>  [4,]  1  4 #>  [5,]  2  1 #>  [6,]  2  2 #>  [7,]  2  3 #>  [8,]  2  4 #>  [9,]  3  1 #> [10,]  3  2 #> [11,]  3  3 #> [12,]  3  4 #> [13,]  4  1 #> [14,]  4  2 #> [15,]  4  3 #> [16,]  4  4  # Permutation with repetition and count of identical permutations permutations(n = 4, r = 2, repeats.allowed = TRUE, count.permutations = TRUE) #>       V1 V2 n_permutations #>  [1,]  1  1              2 #>  [2,]  2  1              1 #>  [3,]  3  1              1 #>  [4,]  4  1              1 #>  [5,]  1  2              1 #>  [6,]  2  2              2 #>  [7,]  3  2              1 #>  [8,]  4  2              1 #>  [9,]  1  3              1 #> [10,]  2  3              1 #> [11,]  3  3              2 #> [12,]  4  3              1 #> [13,]  1  4              1 #> [14,]  2  4              1 #> [15,]  3  4              1 #> [16,]  4  4              2  # Using a custom vector of objects for permutations permutations(v = c(\"apple\", \"banana\", \"cherry\"), r = 2) #>      V1       V2       #> [1,] \"apple\"  \"banana\" #> [2,] \"banana\" \"apple\"  #> [3,] \"apple\"  \"cherry\" #> [4,] \"cherry\" \"apple\"  #> [5,] \"banana\" \"cherry\" #> [6,] \"cherry\" \"banana\""}]
